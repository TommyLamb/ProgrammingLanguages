(* Programming Languages *);
(* Question B (Recursion, chaining, functions) *);
(* Tommy Lamb *);
(* H00217505 *);
(* *);
(* *);
(* Question 1 *);
fun log2 1 = 0 | log2 n = 1 + log2 (n div 2);
(* *);
log2 8;
log2 1;
log2 2;
(* *);
(* *);
(* Question 2 *);
fun sqrt x s = if s*s <= x then s else (sqrt x (s-1));
(* *);
sqrt 10 5;
sqrt 2 5;
sqrt 10 2;
sqrt 10 0;
sqrt 0 10;
sqrt 0 0;
(* *);
(* *);
(* Question 3 *);
fun sumSq 0 = 0 | sumSq n = (n*n)+(sumSq(n-1));
(* *);
sumSq 3;
sumSq 0;
sumSq 10;
(* *);
(* *);
(* Question 4 *);
(* This is the 'true' version, using type real, of what the question text specifies*);
fun realSumHalf 0 = 0.0 | realSumHalf n = ((real n) / 2.0) + realSumHalf (n-1);
(* This is what the given test case specifies *);
fun sumHalf 0 = 0 | sumHalf n = (n div 2) + (sumHalf (n - 1));
(* *);
realSumHalf 6;
sumHalf 6;
realSumHalf 2;
sumHalf 2;
realSumHalf 0;
sumHalf 0;
(* *);
(* *);
(* Question 5 *);
fun sumF f 0 = 0 | sumF f n = (f n) + (sumF f (n-1));
fun inc x = x+1;
(* *);
sumF inc 3;
(* *);
(* *);
(* Question 6 *);
fun sumSq2 n = sumF (fn x => x*x) n;
(* *);
sumSq2 3;
(* *);
(* *);
(* Question 7 *);
fun sumHalf2 n = sumF (fn x => x div 2) n;
(* *);
sumHalf2 6;
sumHalf2 2;
sumHalf2 0;
(* *);
(* *);
(* End of Answers *);